#3 Javascript Wrapping Functions
/*
Write a wrap function that takes the execute function as an argument and returns a 
modified function so that the following requirements are met
    * Any Result returned by the funtion execute should be returned from the modified function unchanged
    * If the function execute throws an error, its future executions should return null
    * After the function execute has thrown an error, its future executions should be prevented and null 
    should be returned
    * multiple wrapped functions can coexist
*/

function wrap(execute){
    // Return modified function
    let didFail = false

    return function(){
        if (didFail){
            return null
        }

        try{
            return execute()
        } catch {
            didFail = true
            return null
        }
    }
}


let errorExec = wrap(function(){
    throw new Error("Error")
})

let resultExec = wrap(function(){
    return "Result"
})


console.log(errorExec && errorExec())
console.log(errorExec && resultExec())






// #4 Javascript accesing methods of a OOP class.
/*
The code below shows how public API for a javascript class Screen should function. The 
methods already have the correct implementations but the class doesn't have a constructor
and the javascript accessors doesnt behave as expected

var screen = new Screen(0,0)
screen.dimensions = '500x300'
screen.width = 400
console.log(screen.diagonal) // should print 500
*/

class Screen {
    diagonal(){
        return Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2))
    }

    dimensions(definition){
        let dimensions = definition.split('x')
        this.width = parseInt(dimensions[0])
        this.height = parseInt(dimensions[1])
    }
}

let screen = new Screen(0,0)
screen.dimensions("500x300")
screen.width = 400
console.log(screen.diagonal())





// # 6 Python what happens when this function runs
def read_first_line(path):
    file =None
    first_line = None
    try:
        file=open(path)
    except FileNotFoundError as e:
        print("Error reading from path", e.strerror)
    finally:
        print("finally done")
    return first_line

read_first_line("/test")

"""
When function runs: 
  An error message will be printed
  The function will return None
"""




// #7 Python example of Classes and Inheritance
class MilesToKmConverter:
    def get_miles_to_km_factor(self):
        return 1.609
    
    def miles_to_km(self, miles):
        return self.get_miles_to_km_factor() * miles

class NauticalMilesToKmConverter(MilesToKmConverter):
    def get_miles_to_km_factor(self):
        return 1.852
    
    def printFactors(self):
        print(self.get_miles_to_km_factor(), super().get_miles_to_km_factor)


print(MilesToKmConverter().miles_to_km(1))
print(NauticalMilesToKmConverter().miles_to_km(1))

# section of code below wont work because cant access super.get_miles from parent, not sure but namespace gets overridden
NauticalMilesToKmConverter().printFactors()







// #8 Create a class that tracks items in a dict and returns ratio
"""
The CropRatio object can be used to calculate what proportion of a farms harvest is a 
specificifc crop. The objects proportion method should return 0 for crops that were not
added.

for example:
    cropRatio = CropRatio()
    cropRatio.add("Wheat", 4)
    cropRatio.add("Wheat", 5)
    cropRatio.add("Rice", 1)
Running cropRatio.proportion("Wheat") should return 0.9
"""

class CropRatio:
    def __init__(self):
        self._crops = {}
        self._total_weight = 0

    def add(self, name, crop_weight):
        curr_crop_weight = 0
    
        if not name in self._crops:
            self._crops[name] = curr_crop_weight
        
        curr_crop_weight = curr_crop_weight + crop_weight
        self._crops[name] += curr_crop_weight
        self._total_weight += curr_crop_weight
    
    def proportion(self,name):
        if name in self._crops:
            return self._crops[name]/self._total_weight
        else:
            return 0

if __name__ == "__main__":
    crop_ratio = CropRatio()
    crop_ratio.add("Wheat", 4)
    crop_ratio.add("Wheat", 5)
    crop_ratio.add("Rice", 1)

    print(crop_ratio.proportion("Wheat"))





// Python sum 3 numbers in a row
"""
Design a data structure that can efficiently with respect to time used, store and check
if the total of any three successively added elements is equal to a given total.

For example MovingTotal() creates an empty container with no existing totals. append([1,2,3,4])
appends elements [1,2,3,4] which means that there are two existing totals (1+2+3)=6 and (2,3,4)=9
append([5]) appends element 5 and creates an additional total from [3,4,5]. There would now be
three totals (1+2+3=6   2+3+4=9  3+4+5=12) At this point contains(6), contains(9), and contains(12)
should return True, while contains(7) should return False.
"""


class MovingTotal:
    def __init__(self):
        self.nums = []

    def append(self, numbers):
        """
        :param numbers: (list) The list of numbers.
        """
        self.nums += numbers

    def contains(self, total):
        """
        :param total: (int) The total to check for.
        :returns: (bool) If MovingTotal contains the total.
        """
        totals = set()
        list_length = len(self.nums) 
        for i in range(list_length):
            if i < list_length-2:
                totals.add(sum(self.nums[i:3+i]))

        if total in totals:
            return True
        else:
            return False
    


if __name__ == "__main__":
    movingtotal = MovingTotal()

    movingtotal.append([1, 2, 3, 4])
    movingtotal.contains(6)
    print(movingtotal.contains(6))
    print(movingtotal.contains(9))
    print(movingtotal.contains(12))
    print(movingtotal.contains(7))
    
    movingtotal.append([5])
    print(movingtotal.contains(6))
    print(movingtotal.contains(9))
    print(movingtotal.contains(12))
    print(movingtotal.contains(7))
    
    
    
    
    
    // Couldnt figure this one out.
    """
A script you are writing uses logarithmic functions from the math module.

Implement the add_patch function that should add a log100 function to the math module.
The log100 function should wrap the existing math.log function so that it calculates
a logarithm with a base of 100.

For example math.log100(10) is equivalent to math.log(10,100) that should return 0.5
"""

import math

def add_patch():
    math.log100 = lambda x:math.log(x, 100)

"""
Example Case
add_patch()
print(math.log100(10))
"""
    
